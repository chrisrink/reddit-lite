// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Post renders a text post 1`] = `

<article class="post">
  <div class="post-createdby">
    <span>
      Posted by
    </span>
    <a class="post-author"
       href="https://reddit.com/user/ealmansi"
    >
      u/ealmansi
    </a>
    <span class="post-created">
      11 days ago
    </span>
  </div>
  <h3 class="post-title">
    <a href="https:\\reddit.com/r/javascript/comments/afz6gp/til_a_promise_can_await_itself_thereby_creating/">
      TIL: A promise can await itself, thereby creating an infinite (never-resolving) promise.
    </a>
  </h3>
  <p class="post-body">
    I&#x27;m currently writing a JavaScript library related to timers and asynchronous code / promises.

I was trying to create a function to stop a recurrently executing process (think setInterval), which returns a promise marking that the process has been successfully stopped. This promise resolves only after the last execution in this process has finished, making it really simple to await until everything has been fully stopped before moving on. This can be useful for writing tests, since you would normally want to avoid recurrent executions from one test lingering on after the test has ended and Mocha/Jest has moved on to the next one.

In code, these are the functions to start off a recurrent execution, and to stop it:

    function loop (fn) {
      var t = { s: false, p: null }
      _loop(fn, t)
      return t
    }
    
    function _loop (fn, t) {
      t.p = !t.s
        ? fn().then(() =&amp;gt; _loop(fn, t))
        : Promise.resolve()
      return t.p
    }
    
    async function stop (t) {
      t.s = true
      await t.p
    }

Then, you can run:

    var t = loop(async () =&amp;gt; {
      await new Promise(r =&amp;gt; setTimeout(r, 1000))
      console.log(&#x27;looping&#x27;)
    })

and you will see the message &quot;looping&quot; show up in the console once every second.

Then, if you call stop, it may go down something like this from a REPL:

    &amp;gt; stop(t).then(() =&amp;gt; console.log(&#x27;fully stopped&#x27;))
    looping
    fully stopped

And then I thought: What happens if I call the function to stop the recurrent process from within one of its executions?

    var t = loop(async () =&amp;gt; {
      await new Promise(r =&amp;gt; setTimeout(r, 1000))
      await stop(t)
    })
    stop(t).then(() =&amp;gt; console.log(&#x27;fully stopped&#x27;))

Surprisingly, the &quot;fully stopped&quot; message is never displayed. Turns out you get a never-ending cycle, since the stop procedure won&#x27;t finish until the last execution finishes, and vice versa.

After finding this out, I started playing around and found many other ways of creating infinite (never-resolving) promises. Here&#x27;s a couple examples that you might find interesting.

You can make a promise await itself:

    var p = Promise.
      resolve().
      then(() =&amp;gt; p).
      then()
    
    var p = (async () =&amp;gt; {
      await Promise.resolve()
      await p
    })()

And you can also make longer cycles, where a promise waits on a promise that waits on itself:

    var p1 = Promise.
      resolve().
      then(() =&amp;gt; p2)
    
    var p2 = p1.then()

It&#x27;s the first time I encountered the concept of promise cycles and found it very interesting, so I thought you guys might also appreciate it.
  </p>
  <div class="post-actionbar">
    <button class="post-action">
      <svg aria-hidden="true"
           data-prefix="fas"
           data-icon="comment"
           class="svg-inline--fa fa-comment fa-w-16 action-icon"
           role="img"
           xmlns="http://www.w3.org/2000/svg"
           viewbox="0 0 512 512"
      >
        <path fill="currentColor"
              d="M256 32C114.6 32 0 125.1 0 240c0 49.6 21.4 95 57 130.7C44.5 421.1 2.7 466 2.2 466.5c-2.2 2.3-2.8 5.7-1.5 8.7S4.8 480 8 480c66.3 0 116-31.8 140.6-51.4 32.7 12.3 69 19.4 107.4 19.4 141.4 0 256-93.1 256-208S397.4 32 256 32z"
        >
        </path>
      </svg>
      16 Comments
    </button>
    <button class="post-action">
      <svg aria-hidden="true"
           data-prefix="fas"
           data-icon="share"
           class="svg-inline--fa fa-share fa-w-16 action-icon"
           role="img"
           xmlns="http://www.w3.org/2000/svg"
           viewbox="0 0 512 512"
      >
        <path fill="currentColor"
              d="M503.691 189.836L327.687 37.851C312.281 24.546 288 35.347 288 56.015v80.053C127.371 137.907 0 170.1 0 322.326c0 61.441 39.581 122.309 83.333 154.132 13.653 9.931 33.111-2.533 28.077-18.631C66.066 312.814 132.917 274.316 288 272.085V360c0 20.7 24.3 31.453 39.687 18.164l176.004-152c11.071-9.562 11.086-26.753 0-36.328z"
        >
        </path>
      </svg>
      Share
    </button>
    <button class="post-action">
      <svg aria-hidden="true"
           data-prefix="fas"
           data-icon="bookmark"
           class="svg-inline--fa fa-bookmark fa-w-12 action-icon"
           role="img"
           xmlns="http://www.w3.org/2000/svg"
           viewbox="0 0 384 512"
      >
        <path fill="currentColor"
              d="M0 512V48C0 21.49 21.49 0 48 0h288c26.51 0 48 21.49 48 48v464L192 400 0 512z"
        >
        </path>
      </svg>
      Save
    </button>
  </div>
</article>

`;

exports[`Post renders an image post 1`] = `

<article class="post">
  <div class="post-createdby">
    <span>
      Posted by
    </span>
    <a class="post-author"
       href="https://reddit.com/user/valentine1"
    >
      u/valentine1
    </a>
    <span class="post-created">
      11 days ago
    </span>
  </div>
  <h3 class="post-title">
    <a href="https:\\reddit.com/r/EarthPorn/comments/afye8a/blue_lake_sits_below_one_of_colorados_most_iconic/">
      Blue Lake sits below one of Colorado&#x27;s most iconic 14ers, and is accessible to everyone as part of Ralph Lauren&#x27;s Ranch. Thanks Ralph. [867x1300] (OC)
    </a>
  </h3>
  <div>
    <img alt="Post thumbnail"
         class="post-thumbnail"
         src="https://b.thumbs.redditmedia.com/3AW-mg1-TsPyQIAkz0WicYC-L5yMPr7aFfLi8Ss3RSI.jpg"
    >
  </div>
  <div class="post-actionbar">
    <button class="post-action">
      <svg aria-hidden="true"
           data-prefix="fas"
           data-icon="comment"
           class="svg-inline--fa fa-comment fa-w-16 action-icon"
           role="img"
           xmlns="http://www.w3.org/2000/svg"
           viewbox="0 0 512 512"
      >
        <path fill="currentColor"
              d="M256 32C114.6 32 0 125.1 0 240c0 49.6 21.4 95 57 130.7C44.5 421.1 2.7 466 2.2 466.5c-2.2 2.3-2.8 5.7-1.5 8.7S4.8 480 8 480c66.3 0 116-31.8 140.6-51.4 32.7 12.3 69 19.4 107.4 19.4 141.4 0 256-93.1 256-208S397.4 32 256 32z"
        >
        </path>
      </svg>
      229 Comments
    </button>
    <button class="post-action">
      <svg aria-hidden="true"
           data-prefix="fas"
           data-icon="share"
           class="svg-inline--fa fa-share fa-w-16 action-icon"
           role="img"
           xmlns="http://www.w3.org/2000/svg"
           viewbox="0 0 512 512"
      >
        <path fill="currentColor"
              d="M503.691 189.836L327.687 37.851C312.281 24.546 288 35.347 288 56.015v80.053C127.371 137.907 0 170.1 0 322.326c0 61.441 39.581 122.309 83.333 154.132 13.653 9.931 33.111-2.533 28.077-18.631C66.066 312.814 132.917 274.316 288 272.085V360c0 20.7 24.3 31.453 39.687 18.164l176.004-152c11.071-9.562 11.086-26.753 0-36.328z"
        >
        </path>
      </svg>
      Share
    </button>
    <button class="post-action">
      <svg aria-hidden="true"
           data-prefix="fas"
           data-icon="bookmark"
           class="svg-inline--fa fa-bookmark fa-w-12 action-icon"
           role="img"
           xmlns="http://www.w3.org/2000/svg"
           viewbox="0 0 384 512"
      >
        <path fill="currentColor"
              d="M0 512V48C0 21.49 21.49 0 48 0h288c26.51 0 48 21.49 48 48v464L192 400 0 512z"
        >
        </path>
      </svg>
      Save
    </button>
  </div>
</article>

`;
