{"version":3,"sources":["constants.js","reducers/posts.js","reducers/subreddits.js","reducers/updates.js","reducers/index.js","components/RedditLogo/RedditLogo.js","components/Header/SubPicker.js","components/Header/ViewPicker.js","components/Header/Header.js","components/Header/index.js","components/Post/PostActions.js","components/Post/CreatedBy.js","components/Post/index.js","components/Post/Post.js","components/PostList/PostList.js","components/PostList/index.js","api/reddit.js","actions/posts.js","actions/subreddit.js","actions/updates.js","components/SubRoute/SubRoute.js","components/SubRoute/index.js","App.js","store.js","serviceWorker.js","index.js"],"names":["ACTIONS","REQUEST_POSTS","RECIEVE_POSTS","RECEIVE_POSTS_FAILED","CLEAR_POSTS","ADD_NEW_POSTS","REQUEST_SUBS","RECIEVE_SUBS","RECEIVE_SUBS_FAILED","RESET_SUBS","RESET_BEFOREPOSTS","RECIEVE_BEFOREPOSTS","DEFAULTS","subreddit","title","display_name","view","searchText","DEFAULT_SUBS","initialState","loading","loadingNext","failed","postsByOrder","postsbyName","before","undefined","after","listFailed","list","beforeList","combineReducers","posts","state","arguments","length","action","type","Object","objectSpread","payload","RECIEVE_POSTS_FAILED","_action$payload","postsByName","concat","toConsumableArray","subreddits","updates","RedditLogo","props","react_default","a","createElement","className","xmlns","viewBox","fill","cx","cy","r","d","showLogoText","text","defaultProps","React","memo","SubPicker","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleOpen","setTimeout","input","current","focus","createRef","_this$props","options","value","onSearchChange","onChange","searchValue","searching","Dropdown","onOpen","closeOnBlur","Menu","key","Input","icon","iconPosition","placeholder","e","_ref","ref","scrolling","map","option","Item","onClick","PureComponent","ViewFilter","selection","find","direction","subredditLoading","Header","subList","subredditSearch","onSubredditChange","onSubredditSearch","onViewChange","showNew","onShowNew","href","components_RedditLogo_RedditLogo","Header_SubPicker","Message","color","size","ViewPicker","PostActions","createAction","actionName","onAction","window","location","commentText","commentCount","index_es","faComment","faShare","faBookmark","CreatedBy","author","created","moment","unix","fromNow","Post","postClass","classNames","post","permalink","style","Post_CreatedBy","created_utc","selftext","thumbnail","alt","src","Post_PostActions","num_comments","DEFAULT_COLUMN_WIDTH","PostList","_handleCellsRendered","startIndex","stopIndex","loadMore","_columnCount","_cache","CellMeasurerCache","defaultHeight","defaultWidth","fixedWidth","_cellRenderer","bind","assertThisInitialized","_onResize","_renderAutoSizer","_renderMasonry","_setMasonryRef","prevProps","preState","clearAll","_resetCellPositioner","_masonry","recomputeCellPositions","Math","floor","_width","_bodyWidth","_cellPositioner","createCellPositioner","cellMeasurerCache","columnCount","columnWidth","spacer","reset","width","_ref2","_calculateColumnCount","index","_ref3","parent","react","CellMeasurer","cache","components_Post","height","_ref4","scrollTop","_height","_scrollTop","AutoSizer","disableHeight","onResize","overscanByPixels","_ref5","_initCellPositioner","Masonry","autoHeight","cellCount","cellPositioner","cellRenderer","onCellsRendered","WindowScroller","_callee","query","regenerator_default","wrap","_context","prev","next","abrupt","fetch","stop","_callee2","_context2","_callee3","_context3","_callee4","_context4","getLoadType","loadValue","requestPosts","loadType","splitIntoOrder","item","name","reduce","receivePosts","json","data","children","child","fetchPosts","reload","dispatch","getPosts","then","response","fetchNextPost","getPostsAfter","addNewPost","newPosts","recieveSubs","fetchSubreddits","requestSubs","searchSubs","clone","resetSubreddits","resetUpdates","fetchUpdates","getPostsBefore","receiveBeforePosts","SubRoute","checkUpdates","_this$state","actions","handleSubRedditChange","history","push","handleViewChange","handleLoadMore","_this$props2","_this$state2","handleShowNew","_this$props3","scrollTo","handleSubRedditSearch","_props$match$params","match","params","_props$match$params$v","_props$match$params$s","_this$state3","prevState","_this$state4","watchForUpdates","timer","clearInterval","setInterval","setState","faCompass","spin","renderLoading","components_PostList","renderNoResults","_this$state5","_this$props4","subredditList","components_Header","renderList","connect","_state$posts","bindActionCreators","withRouter","store","preloadedState","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","configureStore","App","es","BrowserRouter","Switch","Route","path","component","Redirect","from","to","exact","Boolean","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.47394c44.chunk.js","sourcesContent":["const ACTIONS = {\r\n  REQUEST_POSTS: \"REQUEST_POSTS\",\r\n  RECIEVE_POSTS: \"RECEIVE_POSTS\",\r\n  RECEIVE_POSTS_FAILED: \"RECEIVE_POSTS_FAILED\",\r\n  CLEAR_POSTS: \"CLEAR_POSTS\",\r\n  ADD_NEW_POSTS: \"ADD_NEW_POSTS\",\r\n  REQUEST_SUBS: \"REQUEST_SUBS\",\r\n  RECIEVE_SUBS: \"RECEIVE_SUBS\",\r\n  RECEIVE_SUBS_FAILED: \"RECEIVE_SUBS_FAILED\",\r\n  RESET_SUBS: \"RESET_SUBS\",\r\n  RESET_BEFOREPOSTS: \"RESET_BEFOREPOSTS\",\r\n  RECIEVE_BEFOREPOSTS: \"RECEIVE_BEFOREPOSTS\"\r\n};\r\n\r\nconst DEFAULTS = {\r\n  subreddit: {\r\n    title: \"All\",\r\n    display_name: \"all\"\r\n  },\r\n  view: \"hot\",\r\n  searchText: \"\"\r\n};\r\n\r\nconst DEFAULT_SUBS = [\r\n  {\r\n    title: \"All\",\r\n    display_name: \"all\"\r\n  },\r\n  { title: \"ReactJS\", display_name: \"reactjs\" },\r\n  {\r\n    title: \"JavaScript\",\r\n    display_name: \"javascript\"\r\n  }\r\n];\r\n\r\nconst VIEWS = [\r\n  {\r\n    text: \"Hot\",\r\n    value: \"hot\",\r\n    icon: \"hotjar\"\r\n  },\r\n  {\r\n    text: \"New\",\r\n    value: \"new\",\r\n    icon: \"asterisk\"\r\n  },\r\n  {\r\n    text: \"Controversial\",\r\n    value: \"controversial\",\r\n    icon: \"bolt\"\r\n  },\r\n  {\r\n    text: \"Top\",\r\n    value: \"top\",\r\n    icon: \"trophy\"\r\n  },\r\n  {\r\n    text: \"Rising\",\r\n    value: \"rising\",\r\n    icon: \"chart line\"\r\n  }\r\n];\r\n\r\nexport { ACTIONS, DEFAULTS, DEFAULT_SUBS, VIEWS };\r\n","import { ACTIONS } from \"../constants\";\r\n\r\nconst initialState = {\r\n  loading: true,\r\n  loadingNext: false,\r\n  failed: false,\r\n  postsByOrder: [],\r\n  postsbyName: {},\r\n  before: undefined,\r\n  after: undefined,\r\n  listFailed: false\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case ACTIONS.REQUEST_POSTS:\r\n      return {\r\n        ...state,\r\n        loading: action.payload.loading,\r\n        loadingNext: action.payload.loadingNext,\r\n        failed: false\r\n      };\r\n\r\n    case ACTIONS.CLEAR_POSTS:\r\n      return {\r\n        ...state,\r\n        postsByOrder: []\r\n      };\r\n\r\n    case ACTIONS.RECIEVE_POSTS_FAILED:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        failed: true\r\n      };\r\n\r\n    case ACTIONS.RECIEVE_POSTS:\r\n      const {\r\n        postsByName,\r\n        postsByOrder,\r\n        after,\r\n        loading,\r\n        loadingNext\r\n      } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        loading,\r\n        loadingNext,\r\n        failed: false,\r\n        postsByOrder: [...state.postsByOrder, ...postsByOrder],\r\n        postsByName: { ...state.postsByName, ...postsByName },\r\n        after\r\n      };\r\n\r\n    case ACTIONS.ADD_NEW_POSTS:\r\n      return {\r\n        ...state,\r\n        postsByOrder: [...action.payload.postsByOrder, ...state.postsByOrder],\r\n        postsByName: { ...action.payload.postsByName, ...state.postsByName }\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { ACTIONS, DEFAULT_SUBS } from \"../constants\";\r\n\r\nconst initialState = {\r\n  list: DEFAULT_SUBS,\r\n  loading: true,\r\n  failed: false\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case ACTIONS.REQUEST_SUBS:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        failed: false\r\n      };\r\n\r\n    case ACTIONS.RECEIVE_SUBS_FAILED:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        failed: true\r\n      };\r\n\r\n    case ACTIONS.RECIEVE_SUBS:\r\n      const list = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        failed: false,\r\n        list\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { ACTIONS } from \"../constants\";\r\n\r\nconst initialState = {\r\n  beforeList: []\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case ACTIONS.RESET_BEFOREPOSTS:\r\n      return {\r\n        ...state,\r\n        beforeList: []\r\n      };\r\n\r\n    case ACTIONS.RECIEVE_BEFOREPOSTS:\r\n      const { list } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        beforeList: list\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport posts from \"./posts\";\r\nimport subreddits from \"./subreddits\";\r\nimport updates from \"./updates\";\r\n\r\nexport default combineReducers({ posts, subreddits, updates });\r\nexport { posts, subreddits, updates };\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./redditlogo.css\";\r\n\r\nconst propTypes = {\r\n  /**\r\n   * Show Logo Text \"Reddit\"\r\n   */\r\n  showLogoText: PropTypes.bool,\r\n\r\n  /**\r\n   * Show additional Text\r\n   */\r\n  text: PropTypes.string\r\n};\r\n\r\nconst defaultProps = {\r\n  showLogoText: true,\r\n  text: \" -lite\"\r\n};\r\nconst RedditLogo = props => {\r\n  return (\r\n    <div className=\"reddit-logo\">\r\n      <svg\r\n        className=\"reddit-logo-image\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 20 20\"\r\n      >\r\n        <g>\r\n          <circle fill=\"#FF4500\" cx=\"10\" cy=\"10\" r=\"10\" />\r\n          <path\r\n            fill=\"#FFF\"\r\n            d=\"M16.67,10A1.46,1.46,0,0,0,14.2,9a7.12,7.12,0,0,0-3.85-1.23L11,4.65,13.14,5.1a1,1,0,1,0,.13-0.61L10.82,4a0.31,0.31,0,0,0-.37.24L9.71,7.71a7.14,7.14,0,0,0-3.9,1.23A1.46,1.46,0,1,0,4.2,11.33a2.87,2.87,0,0,0,0,.44c0,2.24,2.61,4.06,5.83,4.06s5.83-1.82,5.83-4.06a2.87,2.87,0,0,0,0-.44A1.46,1.46,0,0,0,16.67,10Zm-10,1a1,1,0,1,1,1,1A1,1,0,0,1,6.67,11Zm5.81,2.75a3.84,3.84,0,0,1-2.47.77,3.84,3.84,0,0,1-2.47-.77,0.27,0.27,0,0,1,.38-0.38A3.27,3.27,0,0,0,10,14a3.28,3.28,0,0,0,2.09-.61A0.27,0.27,0,1,1,12.48,13.79Zm-0.18-1.71a1,1,0,1,1,1-1A1,1,0,0,1,12.29,12.08Z\"\r\n          />\r\n        </g>\r\n      </svg>\r\n      {props.showLogoText && (\r\n        <svg className=\"reddit-logo-text\" viewBox=\"0 0 55 17.44\">\r\n          <g fill=\"#FFF\">\r\n            <circle fill=\"#FF4500\" cx=\"45.77\" cy=\"3.33\" r=\"2.05\" />\r\n            <path\r\n              fill=\"inherit\"\r\n              d=\"M16.73,12.05a1.44,1.44,0,0,0,1.54-1.48,4.91,4.91,0,0,0-.1-0.83,5.66,5.66,0,0,0-5.34-4.61c-3,0-5.51,2.76-5.51,6.15s2.47,6.15,5.51,6.15a5.47,5.47,0,0,0,4.26-1.78,1.19,1.19,0,0,0-.19-1.77,1.25,1.25,0,0,0-1.53.16,3.78,3.78,0,0,1-2.54,1.09,3.42,3.42,0,0,1-3.14-3.08h7ZM12.82,7.44a3.3,3.3,0,0,1,3,2.56h-6A3.3,3.3,0,0,1,12.82,7.44Z\"\r\n            />\r\n            <path\r\n              fill=\"inherit\"\r\n              d=\"M7.44,6.32a1.15,1.15,0,0,0-1-1.14A4.46,4.46,0,0,0,2.31,6.69V6.54A1.15,1.15,0,1,0,0,6.54V16a1.18,1.18,0,0,0,1.08,1.2A1.15,1.15,0,0,0,2.31,16V11.15A3.51,3.51,0,0,1,6.15,7.47H6.38A1.15,1.15,0,0,0,7.44,6.32Z\"\r\n            />\r\n            <path\r\n              fill=\"inherit\"\r\n              d=\"M46.92,7.56a1.15,1.15,0,0,0-2.31,0V16a1.15,1.15,0,1,0,2.31,0V7.56Z\"\r\n            />\r\n            <path\r\n              fill=\"inherit\"\r\n              d=\"M29.87,1.15A1.15,1.15,0,0,0,28.72,0h0a1.15,1.15,0,0,0-1.15,1.15V6.31a4,4,0,0,0-2.95-1.18c-3,0-5.51,2.76-5.51,6.15s2.47,6.15,5.51,6.15a4.08,4.08,0,0,0,3-1.19A1.15,1.15,0,0,0,29.87,16V1.15Zm-5.26,14c-1.77,0-3.21-1.72-3.21-3.85s1.43-3.85,3.21-3.85,3.21,1.72,3.21,3.85S26.39,15.13,24.62,15.13Z\"\r\n            />\r\n            <path\r\n              fill=\"inherit\"\r\n              d=\"M41.92,1.15A1.15,1.15,0,0,0,40.77,0h0a1.15,1.15,0,0,0-1.15,1.15V6.31a4,4,0,0,0-2.95-1.18c-3,0-5.51,2.76-5.51,6.15s2.47,6.15,5.51,6.15a4.08,4.08,0,0,0,3-1.19A1.15,1.15,0,0,0,41.92,16V1.15Zm-5.26,14c-1.77,0-3.21-1.72-3.21-3.85s1.43-3.85,3.21-3.85,3.21,1.72,3.21,3.85S38.44,15.13,36.67,15.13Z\"\r\n            />\r\n            <path\r\n              fill=\"inherit\"\r\n              d=\"M52.91,16V7.44h1a1,1,0,0,0,1.06-1,1,1,0,0,0-1-1.09H52.91V3.76a1.18,1.18,0,0,0-1.08-1.19,1.15,1.15,0,0,0-1.23,1.15V5.38h-1a1,1,0,0,0-1.06,1,1,1,0,0,0,1,1.09h1V16a1.15,1.15,0,0,0,1.15,1.15h0A1.15,1.15,0,0,0,52.91,16Z\"\r\n            />\r\n          </g>\r\n        </svg>\r\n      )}\r\n      {props.text && <span className=\"reddit-logo-addtext\">{props.text}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nRedditLogo.propTypes = propTypes;\r\nRedditLogo.defaultProps = defaultProps;\r\n\r\nexport default React.memo(RedditLogo);\r\n","import React, { PureComponent } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Input, Dropdown } from \"semantic-ui-react\";\r\nimport { DEFAULT_SUBS } from \"../../constants\";\r\n\r\nclass SubPicker extends PureComponent {\r\n  static propTypes = {\r\n    /**\r\n     * Callback fired when a new subreddit is selectect.\r\n     * @param {Synthetic Event}\r\n     */\r\n    onChange: PropTypes.func,\r\n    onSearchChange: PropTypes.func,\r\n    searchValue: PropTypes.string,\r\n    searching: PropTypes.bool,\r\n    options: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        title: PropTypes.string,\r\n        display_name: PropTypes.string\r\n      })\r\n    ),\r\n\r\n    /**\r\n     * The key of the select subreddit\r\n     */\r\n    value: PropTypes.shape({\r\n      title: PropTypes.string,\r\n      display_name: PropTypes.string\r\n    })\r\n  };\r\n\r\n  static defaultProps = {\r\n    options: [DEFAULT_SUBS]\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.input = React.createRef();\r\n  }\r\n\r\n  handleOpen = () => {\r\n    setTimeout(() => {\r\n      if (this.input.current) {\r\n        this.input.current.focus();\r\n      }\r\n    }, 10);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      options,\r\n      value,\r\n      onSearchChange,\r\n      onChange,\r\n      searchValue,\r\n      searching\r\n    } = this.props;\r\n\r\n    const handleSearchChange = (e, { value }) => {\r\n      if (onSearchChange) {\r\n        onSearchChange(value);\r\n      }\r\n    };\r\n\r\n    return (\r\n      <Dropdown\r\n        text={value.title}\r\n        className=\"subpicker\"\r\n        onOpen={this.handleOpen}\r\n        closeOnBlur={false}\r\n      >\r\n        <Dropdown.Menu key=\"sub-input\">\r\n          <Input\r\n            icon=\"search\"\r\n            iconPosition=\"left\"\r\n            className=\"search\"\r\n            placeholder=\"Search for a Subreddit\"\r\n            onChange={handleSearchChange}\r\n            value={searchValue}\r\n            loading={searching}\r\n            ref={this.input}\r\n          />\r\n          <Dropdown.Menu scrolling key=\"sub-list\">\r\n            {options.map(option => (\r\n              <Dropdown.Item\r\n                key={option.display_name}\r\n                text={option.title}\r\n                value={option.display_name}\r\n                onClick={onChange}\r\n              />\r\n            ))}\r\n          </Dropdown.Menu>\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SubPicker;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Dropdown } from \"semantic-ui-react\";\r\nimport { VIEWS } from \"../../constants\";\r\n\r\nconst propTypes = {\r\n  onChange: PropTypes.func,\r\n  options: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      text: PropTypes.string,\r\n      value: PropTypes.string,\r\n      icon: PropTypes.string\r\n    })\r\n  ),\r\n  value: PropTypes.string\r\n};\r\n\r\nconst defaultProps = {\r\n  options: VIEWS\r\n};\r\nconst ViewFilter = props => {\r\n  const selection = props.options.find(option => option.value === props.value);\r\n\r\n  return (\r\n    <div className=\"viewpicker\">\r\n      <span className=\"viewpicker-label\">Sort by:</span>\r\n      <Dropdown\r\n        text={(selection && selection.value) || \"\"}\r\n        icon={(selection && selection.icon) || \"\"}\r\n        options={props.options}\r\n        onChange={props.onChange}\r\n        value={props.value}\r\n        direction={\"left\"}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nViewFilter.propTypes = propTypes;\r\nViewFilter.defaultProps = defaultProps;\r\n\r\nexport default ViewFilter;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Message } from \"semantic-ui-react\";\r\n\r\nimport { DEFAULTS } from \"../../constants\";\r\nimport RedditLogo from \"../RedditLogo/RedditLogo\";\r\nimport SubPicker from \"./SubPicker\";\r\nimport ViewPicker from \"./ViewPicker\";\r\nimport \"./header.css\";\r\n\r\nconst propTypes = {\r\n  subreddit: PropTypes.shape({\r\n    title: PropTypes.string,\r\n    display_name: PropTypes.string\r\n  }),\r\n  subList: PropTypes.array,\r\n  subredditLoading: PropTypes.bool,\r\n  onSubredditChange: PropTypes.func,\r\n  onSubredditSearch: PropTypes.func,\r\n\r\n  subredditSearch: PropTypes.string,\r\n  onViewChange: PropTypes.func,\r\n  view: PropTypes.string,\r\n  showNew: PropTypes.bool,\r\n  onShowNew: PropTypes.func\r\n};\r\n\r\nconst defaultProps = {\r\n  view: DEFAULTS.view,\r\n  subreddit: DEFAULTS.subreddit,\r\n  subredditLoading: false\r\n};\r\nconst Header = props => {\r\n  const {\r\n    subreddit,\r\n    subList,\r\n    subredditLoading,\r\n    subredditSearch,\r\n    onSubredditChange,\r\n    onSubredditSearch,\r\n    view,\r\n    onViewChange,\r\n    showNew,\r\n    onShowNew\r\n  } = props;\r\n  return (\r\n    <header className=\"app-header\">\r\n      <a href=\"https://reddit.com\">\r\n        <RedditLogo />\r\n      </a>\r\n      <SubPicker\r\n        value={subreddit}\r\n        onChange={onSubredditChange}\r\n        onSearchChange={onSubredditSearch}\r\n        loading={subredditLoading}\r\n        searchValue={subredditSearch}\r\n        options={subList}\r\n      />\r\n      <div className=\"header-message\">\r\n        <Message\r\n          color=\"green\"\r\n          size=\"mini\"\r\n          className={showNew ? \"appear\" : \"\"}\r\n          onClick={onShowNew}\r\n        >\r\n          {showNew && \"Refresh\"}\r\n        </Message>\r\n      </div>\r\n      <ViewPicker value={view} onChange={onViewChange} />\r\n    </header>\r\n  );\r\n};\r\n\r\nHeader.propTypes = propTypes;\r\nHeader.defaultProps = defaultProps;\r\n\r\nexport default Header;\r\n","import Header from \"./Header\";\r\nexport default Header;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./styles/postactions.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faComment,\r\n  faShare,\r\n  faBookmark\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst propTypes = {\r\n  /**\r\n   * The amount of comments on a post\r\n   */\r\n  commentCount: PropTypes.number,\r\n\r\n  /**\r\n   * Triggered when an action is invoked\r\n   * @param {string} actionName\r\n   */\r\n  onAction: PropTypes.func\r\n};\r\n\r\nconst defaultProps = {\r\n  onAction: () => {},\r\n  commentCount: 0\r\n};\r\nconst PostActions = props => {\r\n  const createAction = actionName => () => {\r\n    props.onAction(actionName);\r\n\r\n    if (actionName === \"comment\") {\r\n      window.location.href = props.href;\r\n    }\r\n  };\r\n  const commentText =\r\n    props.commentCount === 0 ? \"Comment\" : `${props.commentCount} Comments`;\r\n\r\n  return (\r\n    <div className=\"post-actionbar\">\r\n      <button className=\"post-action\" onClick={createAction(\"comment\")}>\r\n        <FontAwesomeIcon className=\"action-icon\" icon={faComment} />\r\n        {commentText}\r\n      </button>\r\n      <button className=\"post-action\" onClick={createAction(\"share\")}>\r\n        <FontAwesomeIcon className=\"action-icon\" icon={faShare} />\r\n        Share\r\n      </button>\r\n      <button className=\"post-action\" onClick={createAction(\"save\")}>\r\n        <FontAwesomeIcon className=\"action-icon\" icon={faBookmark} />\r\n        Save\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nPostActions.propTypes = propTypes;\r\nPostActions.defaultProps = defaultProps;\r\n\r\nexport default PostActions;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./styles/createdby.css\";\r\nimport moment from \"moment\";\r\n\r\nconst humanizeDate = value => moment.unix(value).fromNow();\r\n\r\nconst propTypes = {\r\n  author: PropTypes.string,\r\n  created: PropTypes.number\r\n};\r\nconst CreatedBy = props => {\r\n  return (\r\n    <div className=\"post-createdby\">\r\n      <span>Posted by</span>\r\n      <a\r\n        className=\"post-author\"\r\n        href={`https://reddit.com/user/${props.author}`}\r\n      >\r\n        {`u/${props.author}`}\r\n      </a>\r\n      <span className=\"post-created\">{humanizeDate(props.created)}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nCreatedBy.propTypes = propTypes;\r\n\r\nexport default CreatedBy;\r\n","import Post from \"./Post\";\r\n\r\nexport default Post;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport PostActions from \"./PostActions\";\r\nimport \"./styles/post.css\";\r\nimport CreatedBy from \"./CreatedBy\";\r\nimport classNames from \"classnames\";\r\nconst propTypes = {\r\n  /**\r\n   * userid of the person who created the post\r\n   */\r\n  author: PropTypes.string,\r\n\r\n  /**\r\n   * body text if post is a text type\r\n   */\r\n  selftext: PropTypes.string,\r\n\r\n  /**\r\n   * Unix date value since 1970 in ms.\r\n   */\r\n  create: PropTypes.number,\r\n\r\n  /**\r\n   * Number of comments on post\r\n   */\r\n  num_comments: PropTypes.number,\r\n\r\n  /**\r\n   * Triggered when an action is invoked\r\n   * @param {string} actionName\r\n   */\r\n  onAction: PropTypes.func,\r\n\r\n  /**\r\n   * Brief summary of article\r\n   */\r\n  title: PropTypes.string\r\n};\r\n\r\nconst Post = props => {\r\n  const postClass = classNames({\r\n    post: true\r\n  });\r\n\r\n  const href = `https:\\\\reddit.com${props.permalink}`;\r\n  return (\r\n    <article className={postClass} style={props.style}>\r\n      <CreatedBy author={props.author} created={props.created_utc} />\r\n      <h3 className=\"post-title\">\r\n        <a href={href}>{props.title}</a>\r\n      </h3>\r\n      {props.selftext && <p className=\"post-body\">{props.selftext}</p>}\r\n      {props.thumbnail && props.thumbnail !== \"self\" && (\r\n        <div>\r\n          <img\r\n            alt=\"Post thumbnail\"\r\n            className=\"post-thumbnail\"\r\n            src={props.thumbnail}\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      <PostActions\r\n        commentCount={props.num_comments}\r\n        onAction={props.onAction}\r\n        href={href}\r\n      />\r\n    </article>\r\n  );\r\n};\r\n\r\nPost.propTypes = propTypes;\r\n\r\nexport default React.memo(Post);\r\nexport { Post };\r\n","import PropTypes from \"prop-types\";\nimport * as React from \"react\";\nimport Post from \"../Post\";\n\nimport {\n  CellMeasurer,\n  CellMeasurerCache\n} from \"react-virtualized/dist/es/CellMeasurer\";\nimport AutoSizer from \"react-virtualized/dist/es/AutoSizer\";\nimport WindowScroller from \"react-virtualized/dist/es/WindowScroller\";\nimport {\n  createCellPositioner,\n  Masonry\n} from \"react-virtualized/dist/es/Masonry\";\nimport \"./styles/postlist.css\";\n\nconst GUTTER_SIZE = 20;\nconst DEFAULT_COLUMN_WIDTH = 300;\nexport default class PostList extends React.PureComponent {\n  static propTypes = {\n    list: PropTypes.array.isRequired,\n    loadMore: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props);\n\n    this._columnCount = 0;\n\n    this._cache = new CellMeasurerCache({\n      defaultHeight: 300,\n      defaultWidth: DEFAULT_COLUMN_WIDTH,\n      fixedWidth: true\n    });\n\n    this._cellRenderer = this._cellRenderer.bind(this);\n    this._onResize = this._onResize.bind(this);\n    this._renderAutoSizer = this._renderAutoSizer.bind(this);\n    this._renderMasonry = this._renderMasonry.bind(this);\n    this._setMasonryRef = this._setMasonryRef.bind(this);\n  }\n\n  componentDidUpdate(prevProps, preState) {\n    if (\n      this.props.list.length > 0 &&\n      prevProps.list.length > 0 &&\n      this.props.list[0] !== prevProps.list[0]\n    ) {\n      this._cache.clearAll();\n      this._resetCellPositioner();\n      this._masonry.recomputeCellPositions();\n    }\n  }\n\n  _calculateColumnCount() {\n    this._columnCount = Math.floor(\n      this._width / (DEFAULT_COLUMN_WIDTH + GUTTER_SIZE)\n    );\n\n    this._bodyWidth = this._columnCount * (DEFAULT_COLUMN_WIDTH + GUTTER_SIZE);\n  }\n\n  _initCellPositioner() {\n    if (typeof this._cellPositioner === \"undefined\") {\n      this._cellPositioner = createCellPositioner({\n        cellMeasurerCache: this._cache,\n        columnCount: this._columnCount,\n        columnWidth: DEFAULT_COLUMN_WIDTH,\n        spacer: GUTTER_SIZE\n      });\n    }\n  }\n\n  _resetCellPositioner() {\n    this._cellPositioner.reset({\n      columnCount: this._columnCount,\n      columnWidth: DEFAULT_COLUMN_WIDTH,\n      spacer: GUTTER_SIZE\n    });\n  }\n\n  _setMasonryRef(ref) {\n    this._masonry = ref;\n  }\n\n  _onResize({ width }) {\n    this._width = width;\n\n    this._calculateColumnCount();\n    this._resetCellPositioner();\n    this._masonry.recomputeCellPositions();\n  }\n\n  _handleCellsRendered = ({ startIndex, stopIndex }) => {\n    const { list, loadMore } = this.props;\n\n    if (stopIndex > list.length - this._columnCount * 2) {\n      if (loadMore) {\n        loadMore({ startIndex, stopIndex });\n      }\n    }\n  };\n\n  _cellRenderer({ index, key, parent, style }) {\n    const { list } = this.props;\n\n    const post = list[index];\n\n    return (\n      <CellMeasurer cache={this._cache} index={index} key={key} parent={parent}>\n        <div style={style}>\n          <Post {...post} />\n        </div>\n      </CellMeasurer>\n    );\n  }\n\n  _renderAutoSizer({ height, scrollTop }) {\n    this._height = height;\n    this._scrollTop = scrollTop;\n\n    return (\n      <AutoSizer\n        disableHeight\n        height={height}\n        onResize={this._onResize}\n        overscanByPixels={0}\n        scrollTop={this._scrollTop}\n      >\n        {this._renderMasonry}\n      </AutoSizer>\n    );\n  }\n\n  _renderMasonry({ width }) {\n    const { list } = this.props;\n    this._width = width;\n\n    this._calculateColumnCount();\n    this._initCellPositioner();\n\n    return (\n      <div className=\"postlist\">\n        <Masonry\n          autoHeight={true}\n          cellCount={list.length}\n          cellMeasurerCache={this._cache}\n          cellPositioner={this._cellPositioner}\n          cellRenderer={this._cellRenderer}\n          height={this._height}\n          overscanByPixels={100}\n          ref={this._setMasonryRef}\n          scrollTop={this._scrollTop}\n          onCellsRendered={this._handleCellsRendered}\n          width={this._bodyWidth}\n        />\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <WindowScroller overscanByPixels={0}>\n        {this._renderAutoSizer}\n      </WindowScroller>\n    );\n  }\n}\n","import PostList from \"./PostList\";\r\n\r\nexport default PostList;\r\nexport { PostList };\r\n","async function searchSubs(query) {\r\n  return fetch(\r\n    `https://www.reddit.com/search.json?type=sr&q=${query}&limit=10`\r\n  );\r\n}\r\n\r\nasync function getPosts(subreddit, view) {\r\n  return fetch(`https://www.reddit.com/r/${subreddit}/${view}.json`);\r\n}\r\n\r\nasync function getPostsAfter(subreddit, view, after) {\r\n  return fetch(\r\n    `https://www.reddit.com/r/${subreddit}/${view}.json?after=${after}`\r\n  );\r\n}\r\n\r\nasync function getPostsBefore(subreddit, view, before) {\r\n  return fetch(\r\n    `https://www.reddit.com/r/${subreddit}/${view}.json?before=${before}`\r\n  );\r\n}\r\n\r\nexport { getPosts, searchSubs, getPostsBefore, getPostsAfter };\r\n","import { ACTIONS } from \"../constants\";\r\nimport { getPosts, getPostsAfter } from \"../api/reddit\";\r\n\r\nfunction getLoadType(loadValue, value = true) {\r\n  const payload = {};\r\n  switch (loadValue) {\r\n    case \"loadNext\":\r\n      payload.loadingNext = value;\r\n      break;\r\n    default:\r\n      payload.loading = value;\r\n      break;\r\n  }\r\n  return payload;\r\n}\r\nfunction requestPosts(loadType) {\r\n  return {\r\n    type: ACTIONS.REQUEST_POSTS,\r\n    payload: getLoadType(loadType)\r\n  };\r\n}\r\n\r\nfunction clearPosts() {\r\n  return {\r\n    type: ACTIONS.CLEAR_POSTS\r\n  };\r\n}\r\n\r\nfunction splitIntoOrder(list) {\r\n  const postsByOrder = list.map(item => item.name);\r\n  const postsByName = list.reduce((posts, item) => {\r\n    posts[item.name] = item;\r\n    return posts;\r\n  }, {});\r\n\r\n  return {\r\n    postsByOrder: postsByOrder,\r\n    postsByName: postsByName\r\n  };\r\n}\r\n\r\nfunction receivePosts(json, loadValue) {\r\n  const list = json.data.children.map(child => child.data);\r\n\r\n  const loadType = getLoadType(loadValue, false);\r\n  return {\r\n    type: ACTIONS.RECIEVE_POSTS,\r\n    payload: {\r\n      ...splitIntoOrder(list),\r\n      after: json.data.after,\r\n      ...loadType\r\n    }\r\n  };\r\n}\r\n\r\nfunction fetchPosts(subreddit, view, reload = false) {\r\n  return dispatch => {\r\n    dispatch(requestPosts(\"load\"));\r\n    if (reload) {\r\n      dispatch(clearPosts());\r\n    }\r\n    return getPosts(subreddit, view)\r\n      .then(response => response.json())\r\n      .then(json => dispatch(receivePosts(json, reload)));\r\n  };\r\n}\r\n\r\nfunction fetchNextPost(subreddit, view, after) {\r\n  return dispatch => {\r\n    dispatch(requestPosts(\"loadNext\"));\r\n    return getPostsAfter(subreddit, view, after)\r\n      .then(response => response.json())\r\n      .then(json => dispatch(receivePosts(json, \"loadNext\")));\r\n  };\r\n}\r\n\r\nfunction addNewPost(newPosts) {\r\n  return {\r\n    type: ACTIONS.ADD_NEW_POSTS,\r\n    payload: splitIntoOrder(newPosts)\r\n  };\r\n}\r\n\r\nexport { requestPosts, receivePosts, fetchPosts, fetchNextPost, addNewPost };\r\n","import { ACTIONS, DEFAULT_SUBS } from \"../constants\";\r\nimport { searchSubs } from \"../api/reddit\";\r\n\r\nfunction requestSubs(query) {\r\n  return {\r\n    type: ACTIONS.REQUEST_SUBS,\r\n    payload: query\r\n  };\r\n}\r\n\r\nfunction recieveSubs(query, json) {\r\n  const list = json.data.children.map(child => child.data);\r\n\r\n  return {\r\n    type: ACTIONS.RECIEVE_SUBS,\r\n    payload: list\r\n  };\r\n}\r\n\r\nfunction fetchSubreddits(query = \"\") {\r\n  return dispatch => {\r\n    if (query) {\r\n      dispatch(requestSubs(query));\r\n      return searchSubs(query)\r\n        .then(response => response.clone().json())\r\n        .then(json => dispatch(recieveSubs(query, json)));\r\n    } else {\r\n      dispatch(recieveSubs(query, DEFAULT_SUBS));\r\n    }\r\n  };\r\n}\r\n\r\nfunction resetSubreddits(searchText = \"\") {\r\n  return {\r\n    type: ACTIONS.RESET_SUBS,\r\n    payload: {\r\n      options: DEFAULT_SUBS,\r\n      searchText: searchText\r\n    }\r\n  };\r\n}\r\n\r\nexport { fetchSubreddits, recieveSubs, requestSubs, resetSubreddits };\r\n","import { ACTIONS } from \"../constants\";\r\nimport { getPostsBefore } from \"../api/reddit\";\r\n\r\nfunction resetUpdates() {\r\n  return {\r\n    type: ACTIONS.RESET_BEFOREPOSTS\r\n  };\r\n}\r\n\r\nfunction receiveBeforePosts(json) {\r\n  const list = json.data.children.map(child => child.data);\r\n\r\n  return {\r\n    type: ACTIONS.RECIEVE_BEFOREPOSTS,\r\n    payload: {\r\n      list\r\n    }\r\n  };\r\n}\r\n\r\nfunction fetchUpdates(subreddit, view, before) {\r\n  return dispatch => {\r\n    return getPostsBefore(subreddit, view, before)\r\n      .then(response => response.json())\r\n      .then(json => dispatch(receiveBeforePosts(json)));\r\n  };\r\n}\r\n\r\nexport { fetchUpdates, resetUpdates };\r\n","import React, { Fragment, PureComponent } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCompass } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Header from \"../Header\";\r\nimport PostList from \"../PostList\";\r\nimport { DEFAULTS } from \"../../constants\";\r\nimport { fetchPosts, fetchNextPost, addNewPost } from \"../../actions/posts\";\r\nimport { fetchSubreddits, resetSubreddits } from \"../../actions/subreddit\";\r\nimport { fetchUpdates, resetUpdates } from \"../../actions/updates\";\r\n\r\nimport \"./styles/subroute.css\";\r\nconst POLL_INTERVAL = 20000;\r\nclass SubRoute extends PureComponent {\r\n  static propTypes = {\r\n    match: PropTypes.object.isRequired,\r\n    location: PropTypes.object,\r\n    history: PropTypes.object,\r\n    loading: PropTypes.bool,\r\n    loadingNext: PropTypes.bool,\r\n    actions: PropTypes.shape({\r\n      fetchPosts: PropTypes.func,\r\n      fetchNextPost: PropTypes.func,\r\n      addNewPost: PropTypes.func,\r\n      fetchSubreddits: PropTypes.func,\r\n      resetSubreddits: PropTypes.func,\r\n      fetchUpdates: PropTypes.func,\r\n      resetUpdates: PropTypes.func\r\n    }),\r\n    postsByOrder: PropTypes.array,\r\n    postsByName: PropTypes.object,\r\n    subredditList: PropTypes.array,\r\n    after: PropTypes.string,\r\n    watchForNew: PropTypes.bool,\r\n    newPosts: PropTypes.array\r\n  };\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    const {\r\n      view = DEFAULTS.view,\r\n      subreddit = DEFAULTS.subreddit\r\n    } = props.match.params;\r\n\r\n    return {\r\n      subreddit,\r\n      view\r\n    };\r\n  }\r\n\r\n  state = {\r\n    postsByOrder: [],\r\n    postsbyName: {},\r\n    subreddit: DEFAULTS.subreddit,\r\n    subredditLoading: false,\r\n    subredditSearch: \"\",\r\n    view: DEFAULTS.view\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleSubRedditSearch = this.handleSubRedditSearch.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { fetchPosts } = this.props.actions;\r\n    const { subreddit, view } = this.state;\r\n    fetchPosts(subreddit, view);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { fetchPosts } = this.props.actions;\r\n\r\n    const { subreddit, view } = this.state;\r\n\r\n    if (prevState.subreddit !== subreddit || prevState.view !== view) {\r\n      fetchPosts(subreddit, view, true);\r\n    }\r\n\r\n    this.watchForUpdates();\r\n  }\r\n\r\n  watchForUpdates() {\r\n    if (true || this.props.watchForNew) {\r\n      if (this.timer) {\r\n        clearInterval(this.timer);\r\n        this.timer = undefined;\r\n      }\r\n      this.timer = setInterval(this.checkUpdates, POLL_INTERVAL);\r\n    }\r\n  }\r\n\r\n  checkUpdates = () => {\r\n    const { view, subreddit } = this.state;\r\n    const { postsByOrder, actions } = this.props;\r\n\r\n    if (postsByOrder.length > 0) {\r\n      actions.fetchUpdates(subreddit, view, postsByOrder[0]);\r\n    }\r\n  };\r\n\r\n  handleSubRedditChange = (e, { value }) => {\r\n    const { view } = this.state;\r\n    this.props.history.push(`/${value}/${view}`);\r\n  };\r\n\r\n  handleViewChange = (e, { value }) => {\r\n    const { subreddit } = this.state;\r\n    this.props.history.push(`/${subreddit}/${value}`);\r\n  };\r\n\r\n  handleSubRedditSearch(value) {\r\n    const searchText = value;\r\n    if (searchText.length >= 3) {\r\n      this.props.actions.fetchSubreddits(value);\r\n    } else {\r\n      this.props.actions.resetSubreddits();\r\n    }\r\n\r\n    if (value.length >= 3) {\r\n      this.props.actions.fetchSubreddits(value);\r\n    }\r\n    this.setState({ subredditSearch: value });\r\n  }\r\n\r\n  handleLoadMore = ({ startIndex, stopIndex }) => {\r\n    const { after, loadingNext } = this.props;\r\n    const { subreddit, view } = this.state;\r\n\r\n    if (!loadingNext) {\r\n      this.props.actions.fetchNextPost(subreddit, view, after);\r\n    }\r\n  };\r\n\r\n  handleShowNew = () => {\r\n    const { newPosts, actions } = this.props;\r\n\r\n    actions.addNewPost(newPosts);\r\n    actions.resetUpdates();\r\n    window.scrollTo(0, 0);\r\n  };\r\n\r\n  renderLoading() {\r\n    return (\r\n      <div className=\"no-results\">\r\n        <FontAwesomeIcon icon={faCompass} spin />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderNoResults() {\r\n    return <div className=\"no-results\">No Results Found</div>;\r\n  }\r\n\r\n  renderList(postsByOrder, postsByName, view, subreddit, loading) {\r\n    if (loading) {\r\n      return this.renderLoading();\r\n    }\r\n\r\n    if (postsByOrder && postsByOrder.length > 0) {\r\n      const list = postsByOrder.map(name => postsByName[name]);\r\n\r\n      return (\r\n        <PostList\r\n          list={list}\r\n          subreddit={subreddit}\r\n          view={view}\r\n          loadMore={this.handleLoadMore}\r\n        />\r\n      );\r\n    }\r\n\r\n    return this.renderNoResults();\r\n  }\r\n\r\n  render() {\r\n    const { subreddit, subredditLoading, subredditSearch, view } = this.state;\r\n    const {\r\n      postsByOrder,\r\n      postsByName,\r\n      subredditList,\r\n      loading,\r\n      newPosts\r\n    } = this.props;\r\n    return (\r\n      <Fragment>\r\n        <Header\r\n          onSubredditChange={this.handleSubRedditChange}\r\n          onSubredditSearch={this.handleSubRedditSearch}\r\n          subreddit={{ display_name: subreddit, title: subreddit }}\r\n          subList={subredditList}\r\n          subredditLoading={subredditLoading}\r\n          subredditSearch={subredditSearch}\r\n          view={view}\r\n          onViewChange={this.handleViewChange}\r\n          showNew={newPosts && newPosts.length > 0}\r\n          onShowNew={this.handleShowNew}\r\n        />\r\n        {this.renderList(postsByOrder, postsByName, subreddit, view, loading)}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  const {\r\n    postsByOrder,\r\n    postsByName,\r\n    loading,\r\n    loadingNext,\r\n    after\r\n  } = state.posts;\r\n  const { list } = state.subreddits;\r\n  const { beforeList } = state.updates;\r\n  return {\r\n    postsByOrder,\r\n    postsByName,\r\n    subredditList: list,\r\n    loading,\r\n    loadingNext,\r\n    after,\r\n    newPosts: beforeList\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  actions: bindActionCreators(\r\n    {\r\n      fetchPosts,\r\n      fetchNextPost,\r\n      fetchSubreddits,\r\n      resetSubreddits,\r\n      fetchUpdates,\r\n      resetUpdates,\r\n      addNewPost\r\n    },\r\n    dispatch\r\n  )\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SubRoute);\r\n\r\nexport { SubRoute };\r\n","import SubRoute from \"./SubRoute\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nexport default withRouter(SubRoute);\r\n\r\nexport { SubRoute };\r\n","import React, { PureComponent } from \"react\";\nimport { BrowserRouter, Route, Redirect, Switch } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./store\";\nimport SubRoute from \"./components/SubRoute\";\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./styles/app.css\";\n\nconst store = configureStore();\nclass App extends PureComponent {\n  render() {\n    return (\n      <Provider store={store}>\n        <BrowserRouter>\n          <div className=\"App\">\n            <Switch>\n              <Route path=\"/:subreddit/:view\" component={SubRoute} />\n              <Redirect from=\"/\" to=\"/all/hot\" exact={true} />\n            </Switch>\n          </div>\n        </BrowserRouter>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","import { applyMiddleware, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nexport default function configureStore(preloadedState = {}) {\r\n  const store = createStore(\r\n    rootReducer,\r\n    preloadedState,\r\n    composeWithDevTools(applyMiddleware(thunk))\r\n  );\r\n\r\n  if (process.env.NODE_ENV !== \"production\" && module.hot) {\r\n    module.hot.accept(\"./reducers\", () => store.replaceReducer(rootReducer));\r\n  }\r\n\r\n  return store;\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}